<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gsoc on What The Blog?</title>
    <link>https://blog.whatthedude.com/tags/gsoc/</link>
    <description>Recent content in Gsoc on What The Blog?</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Aug 2018 14:22:32 +0530</lastBuildDate>
    
	<atom:link href="https://blog.whatthedude.com/tags/gsoc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GSoC: The all-encompassing final report</title>
      <link>https://blog.whatthedude.com/post/gsoc-final/</link>
      <pubDate>Mon, 13 Aug 2018 14:22:32 +0530</pubDate>
      
      <guid>https://blog.whatthedude.com/post/gsoc-final/</guid>
      <description>Hi! This blog post acts as the final report for GSoC, meant to summarize all of my work in one convenient package.
Intro TL;DR: My GSoC proposal was to port RTEMS, a real-time operating system, to the Intel/AMD x86-64 architecture.
(P.S. - RTEMS was recently used on NASA&amp;rsquo;s Parker Solar Probe!)
Code talks If you&amp;rsquo;re only looking for all the code that was written during this GSoC, the links are here:</description>
    </item>
    
    <item>
      <title>GSoC: Phase 2 status update</title>
      <link>https://blog.whatthedude.com/post/gsoc-phase-2-status/</link>
      <pubDate>Mon, 16 Jul 2018 14:22:32 +0530</pubDate>
      
      <guid>https://blog.whatthedude.com/post/gsoc-phase-2-status/</guid>
      <description>Since our last blog post, I realized that the RTEMS mailing list was a much more convenient method of actually having discussions, and making important decisions. In lieu of that, this blog doesn&amp;rsquo;t include all the decisions that have been made. I&amp;rsquo;ll summarize some of them here.
Boot method Our very first conundrum was the boot method - how do we make our RTEMS kernel and user application UEFI-aware?</description>
    </item>
    
    <item>
      <title>gnu-efi integration: kernel.so or loader.so&#43;kernel.elf</title>
      <link>https://blog.whatthedude.com/post/gnu-efi-kernel-so/</link>
      <pubDate>Sat, 02 Jun 2018 12:24:39 +0530</pubDate>
      
      <guid>https://blog.whatthedude.com/post/gnu-efi-kernel-so/</guid>
      <description>In this post, we&amp;rsquo;ll discuss the 2 possible methods of integrating gnu-efi into your project to make your kernel / OS &amp;ldquo;UEFI-aware&amp;rdquo; (i.e. capable of booting through UEFI firmware).
Other options (without using gnu-efi) are laid out in my previous blog post on the topic.
Relevant context gnu-efi has one key constraint that requires our project&amp;rsquo;s files to be built as shared libraries when linked with libefi and libgnuefi. Namely, from the gnu-efi project&amp;rsquo;s README:</description>
    </item>
    
    <item>
      <title>Options for creating a UEFI application image</title>
      <link>https://blog.whatthedude.com/post/uefi-app-options/</link>
      <pubDate>Fri, 18 May 2018 14:54:32 +0530</pubDate>
      
      <guid>https://blog.whatthedude.com/post/uefi-app-options/</guid>
      <description>Context This post is about some of the ways in which an operating system / kernel can be made to boot as a UEFI application image (through UEFI firmware).
To be clear, let&amp;rsquo;s make sure we have our definitions straight:
 UEFI firmware: The vendor firmware itself, which may or may not support legacy BIOS options. On the OSDev side, we won&amp;rsquo;t really have control over this. For emulation, I&amp;rsquo;ll be using TianoCore&amp;rsquo;s OVMF (OvmfPkgX64) specifically.</description>
    </item>
    
    <item>
      <title>Introduction to my GSoC project: An RTEMS x86-64 port</title>
      <link>https://blog.whatthedude.com/post/rtems-x86-64-port-intro/</link>
      <pubDate>Wed, 25 Apr 2018 20:08:56 +0530</pubDate>
      
      <guid>https://blog.whatthedude.com/post/rtems-x86-64-port-intro/</guid>
      <description>RTEMS is an RTOS which can run on tons of architectures and processor families within those architectures.
However, the modern Intel x86-64 / AMD64 is not one of the currently supported architectures.
&amp;lt;infomerical time&amp;gt;
Have you ever wanted to try a new operating system for your project, but all the emulators for your target processor support a limited number of features, and you really don&amp;rsquo;t want to have to test it all on your hardware?</description>
    </item>
    
    <item>
      <title>The Journey to GSoC 2018 - just the beginning</title>
      <link>https://blog.whatthedude.com/post/journey-to-gsoc/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.whatthedude.com/post/journey-to-gsoc/</guid>
      <description>Here I&amp;rsquo;ll document some of the preperatory tasks I undertook as part of my proposal to RTEMS (AN RTOS THAT&amp;rsquo;S BEEN TO SPACE! SPAAAAAAAAAACE!).
The Hunt To start at the beginning, I&amp;rsquo;m going to have to just say that finding an organization that piques your interest and needs a project that hits just the sweet-spot in &amp;ldquo;I have most of the skills to do this, but I&amp;rsquo;ll still need to learn and grow a lot to bring it to fruition&amp;rdquo; is hard.</description>
    </item>
    
  </channel>
</rss>